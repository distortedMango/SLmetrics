// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// accuracy
double accuracy(const NumericVector& actual, const NumericVector& predicted);
RcppExport SEXP _SLmetrics_accuracy(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(accuracy(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// zerooneloss
double zerooneloss(const NumericVector& actual, const NumericVector& predicted);
RcppExport SEXP _SLmetrics_zerooneloss(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(zerooneloss(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// confusion_matrix
NumericMatrix confusion_matrix(const IntegerVector& actual, const IntegerVector& predicted);
RcppExport SEXP _SLmetrics_confusion_matrix(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(confusion_matrix(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// entropy
double entropy(const NumericVector& actual, const NumericVector& response);
RcppExport SEXP _SLmetrics_entropy(SEXP actualSEXP, SEXP responseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type response(responseSEXP);
    rcpp_result_gen = Rcpp::wrap(entropy(actual, response));
    return rcpp_result_gen;
END_RCPP
}
// huberloss
double huberloss(const NumericVector& actual, const NumericVector& predicted, const double delta);
RcppExport SEXP _SLmetrics_huberloss(SEXP actualSEXP, SEXP predictedSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(huberloss(actual, predicted, delta));
    return rcpp_result_gen;
END_RCPP
}
// mae
double mae(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_mae(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(mae(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// mse
double mse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_mse(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(mse(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// rmse
double rmse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_rmse(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(rmse(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// rmsle
double rmsle(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_rmsle(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(rmsle(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// rsq
double rsq(const NumericVector& actual, const NumericVector& predicted, const double k);
RcppExport SEXP _SLmetrics_rsq(SEXP actualSEXP, SEXP predictedSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(rsq(actual, predicted, k));
    return rcpp_result_gen;
END_RCPP
}
// wmse
double wmse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_wmse(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(wmse(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// wrmse
double wrmse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_wrmse(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(wrmse(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SLmetrics_accuracy", (DL_FUNC) &_SLmetrics_accuracy, 2},
    {"_SLmetrics_zerooneloss", (DL_FUNC) &_SLmetrics_zerooneloss, 2},
    {"_SLmetrics_confusion_matrix", (DL_FUNC) &_SLmetrics_confusion_matrix, 2},
    {"_SLmetrics_entropy", (DL_FUNC) &_SLmetrics_entropy, 2},
    {"_SLmetrics_huberloss", (DL_FUNC) &_SLmetrics_huberloss, 3},
    {"_SLmetrics_mae", (DL_FUNC) &_SLmetrics_mae, 2},
    {"_SLmetrics_mse", (DL_FUNC) &_SLmetrics_mse, 2},
    {"_SLmetrics_rmse", (DL_FUNC) &_SLmetrics_rmse, 2},
    {"_SLmetrics_rmsle", (DL_FUNC) &_SLmetrics_rmsle, 2},
    {"_SLmetrics_rsq", (DL_FUNC) &_SLmetrics_rsq, 3},
    {"_SLmetrics_wmse", (DL_FUNC) &_SLmetrics_wmse, 3},
    {"_SLmetrics_wrmse", (DL_FUNC) &_SLmetrics_wrmse, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SLmetrics(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
